diff --git a/fonction_de_hashage/sources/hashage.c b/fonction_de_hashage/sources/hashage.c
index 3c306d8..d79bceb 100644
--- a/fonction_de_hashage/sources/hashage.c
+++ b/fonction_de_hashage/sources/hashage.c
@@ -42,7 +42,6 @@ HASH *initHash (void)
 #ifdef DEBUG
     fprintf(stderr, "Incrémentation de refcount. Nouvelle valeur =  %d \n", refcount );
 #endif
-
     if(my_hash_table == NULL)
         exit(EXIT_FAILURE);
 
@@ -54,20 +53,19 @@ HASH *initHash (void)
 }
 
 
-
-void destroyHash (HASH * my_hash_table)
+void destroyHash (HASH * p_hash_table)
 {
 #ifdef DEBUG
     fprintf(stderr, "Fonction en cours d'exécution : %s \n", __func__ );
 #endif
     HASH * my_hash_table_next;
 
-    my_hash_table_next = my_hash_table->next;
+    my_hash_table_next = p_hash_table->next;
 
     /* delete the element  H is pointing to */
-    if ((my_hash_table != NULL ) && (refcount > 0))
+    if ((p_hash_table != NULL ) && (refcount > 0))
     {
-      free(my_hash_table);
+      free(p_hash_table);
       refcount--;
 #ifdef DEBUG
       fprintf(stderr, "Décrémentation de refcount. Nouvelle valeur =  %d \n", refcount );
@@ -81,12 +79,12 @@ void destroyHash (HASH * my_hash_table)
 }
 
 
-void setHashValue (HASH * my_hash_table, char key[20], int value)
+void setHashValue (HASH * p_hash_table, char key[20], int value)
 {
 #ifdef DEBUG
     fprintf(stderr, "Fonction en cours d'exécution : %s \n", __func__ );
 #endif
-    int i;
+    unsigned int i;
 
     /*
         Tant que l'on est pas arrive au bout de la table de hashage
@@ -95,60 +93,60 @@ void setHashValue (HASH * my_hash_table, char key[20], int value)
     */
 
 
-    while((my_hash_table->next != NULL) && (strcmp (my_hash_table->key , key) != 0))
+    while((p_hash_table->next != NULL) && (strcmp (p_hash_table->key , key) != 0))
     {
-        my_hash_table = my_hash_table->next;
+        p_hash_table = p_hash_table->next;
     }
 
     /* attention piège : strcmp compare 2 chaines de caractères et renvoie 0 ssi les 2 chaines sont identiques */
 
-    if( strcmp (my_hash_table->key, key) == 0 )
-        my_hash_table->value = value;
+    if( strcmp (p_hash_table->key, key) == 0 )
+        p_hash_table->value = value;
     else
     {
-        my_hash_table->next = (HASH *)malloc(sizeof(HASH));
+        p_hash_table->next = (HASH *)malloc(sizeof(HASH));
 
-        if(my_hash_table->next == NULL)
+        if(p_hash_table->next == NULL)
             exit(EXIT_FAILURE);
 
-        my_hash_table = my_hash_table->next;
+        p_hash_table = p_hash_table->next;
 
-        for ( i=0; i<=strlen(key); i=i+1 )
+        for (i=0; i<=strlen(key); i++)
         {
-            my_hash_table->key[i]=key[i];
+            p_hash_table->key[i]=key[i];
         }
 
-        my_hash_table->value = value;
-        my_hash_table->next = NULL;
+        p_hash_table->value = value;
+        p_hash_table->next = NULL;
     }
 }
 
 
-int getHashValue (HASH * my_hash_table, char key[20])
+int getHashValue (HASH * p_hash_table, char key[20])
 {
 
 #ifdef DEBUG
     fprintf(stderr, "Fonction en cours d'exécution : %s \n", __func__ );
 #endif
 
-    while(strcmp( my_hash_table->key , key) != 0)
+    while(strcmp( p_hash_table->key , key) != 0)
     {
-        my_hash_table = my_hash_table->next;
+        p_hash_table = p_hash_table->next;
     }
 
-    return my_hash_table->value;
+    return p_hash_table->value;
 }
 
-bool b_IsHashKey (HASH * my_hash_table, char key[20])
+bool b_IsHashKey (HASH * p_hash_table, char key[20])
 {
     bool toReturn = false;
 
-    while ( (my_hash_table != NULL) && ( strcmp ( my_hash_table->key , key ) != 0 ) )
+    while ((p_hash_table != NULL) && (strcmp(p_hash_table->key, key) != 0))
     {
-        my_hash_table = my_hash_table->next;
+        p_hash_table = p_hash_table->next;
     }
 
-    if ( (my_hash_table != NULL) && (strcmp(my_hash_table->key , key) == 0 ) )
+    if ((p_hash_table != NULL) && (strcmp(p_hash_table->key, key) == 0))
         return true;
     else
       toReturn =false;
@@ -156,30 +154,29 @@ bool b_IsHashKey (HASH * my_hash_table, char key[20])
     return toReturn;
 }
 
-void deleteHashKey (HASH * my_hash_table, char key[20] )
+void deleteHashKey (HASH * p_hash_table, char key[20] )
 {
 #ifdef DEBUG
     fprintf(stderr, "Fonction en cours d'exécution : %s \n", __func__ );
 #endif
     HASH *hash_to_delete;
 
-    while (strcmp ( my_hash_table->next->key , key ) != 0  )
+    while (strcmp (p_hash_table->next->key, key ) != 0)
     {
-        my_hash_table = my_hash_table->next;
+        p_hash_table = p_hash_table->next;
     }
 
     /*
-        Le pointeur hash_to_delete va pointer vers l'element a supprimer.
-        Il ne faut pas oublier de lier l'element precedent de N avec l'element suivant de N 
-        pour ne pas casser la liste chainée.
+        Le pointeur hash_to_delete va pointer vers l'element a supprimer. Il ne faut pas oublier
+        de lier l'element precedent de N avec l'element suivant de N pour ne pas casser la liste chainée.
     */
 
-    hash_to_delete = my_hash_table->next;
+    hash_to_delete = p_hash_table->next;
 
-    if (my_hash_table->next->next != NULL)
-        my_hash_table->next = my_hash_table->next->next;
+    if (p_hash_table->next->next != NULL)
+        p_hash_table->next = p_hash_table->next->next;
 
-    if (( hash_to_delete != NULL ) && ( refcount > 0 ))
+    if (( hash_to_delete != NULL ) && (refcount > 0))
         free(hash_to_delete);
 }
 
